
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package jFlexCup.parser;

import java_cup.runtime.Symbol;
import lexParser.models.LiteralModel;
import lexParser.models.GroupModel;
import lexParser.models.OperatorModel;
import lexParser.models.RuleModel;

/**
 * CUP v0.11b 20150930 (SVN rev 66) generated parser.
 */
@SuppressWarnings({ "rawtypes" })
public class CupParser extends java_cup.runtime.lr_parser {

	public final Class getSymbolContainer() {
		return Sym.class;
	}

	/** Default constructor. */
	@Deprecated
	public CupParser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	@Deprecated
	public CupParser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public CupParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(
			new String[] { "\000\026\000\002\002\004\000\002\002\003\000\002\012"
					+ "\002\000\002\013\002\000\002\014\002\000\002\010\011"
					+ "\000\002\003\005\000\002\003\003\000\002\015\002\000"
					+ "\002\004\005\000\002\004\003\000\002\016\002\000\002"
					+ "\007\006\000\002\007\003\000\002\006\003\000\002\006"
					+ "\003\000\002\006\003\000\002\005\003\000\002\005\003"
					+ "\000\002\011\004\000\002\011\004\000\002\011\002" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(
			new String[] { "\000\037\000\010\004\007\005\011\013\010\001\002\000"
					+ "\004\002\000\001\002\000\022\002\ufffa\006\037\007\040"
					+ "\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\001\002\000"
					+ "\022\002\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7"
					+ "\014\ufff7\015\ufff7\001\002\000\006\005\ufff9\013\ufff9\001"
					+ "\002\000\010\004\ufff6\005\ufff6\013\ufff6\001\002\000\022"
					+ "\002\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\014"
					+ "\ufff4\015\ufff4\001\002\000\010\010\uffff\011\uffff\012\uffff"
					+ "\001\002\000\004\002\014\001\002\000\004\002\001\001"
					+ "\002\000\010\010\017\011\021\012\020\001\002\000\010"
					+ "\004\ufffe\005\ufffe\013\ufffe\001\002\000\010\004\ufff1\005"
					+ "\ufff1\013\ufff1\001\002\000\010\004\ufff2\005\ufff2\013\ufff2"
					+ "\001\002\000\010\004\ufff3\005\ufff3\013\ufff3\001\002\000"
					+ "\010\004\007\005\011\013\010\001\002\000\006\002\ufffd"
					+ "\015\ufffd\001\002\000\006\002\uffec\015\025\001\002\000"
					+ "\014\002\uffec\004\007\005\011\013\010\015\025\001\002"
					+ "\000\004\002\ufffc\001\002\000\004\002\uffed\001\002\000"
					+ "\004\002\uffee\001\002\000\010\004\007\005\011\013\010"
					+ "\001\002\000\004\014\033\001\002\000\022\002\ufff5\006"
					+ "\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5"
					+ "\001\002\000\006\005\011\013\010\001\002\000\022\002"
					+ "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8"
					+ "\015\ufff8\001\002\000\010\004\007\005\011\013\010\001"
					+ "\002\000\010\004\ufff0\005\ufff0\013\ufff0\001\002\000\010"
					+ "\004\uffef\005\uffef\013\uffef\001\002\000\016\002\ufffb\010"
					+ "\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(
			new String[] { "\000\037\000\014\002\012\003\011\004\004\007\005\010"
					+ "\003\001\001\000\002\001\001\000\004\005\035\001\001"
					+ "\000\002\001\001\000\004\015\033\001\001\000\004\016"
					+ "\030\001\001\000\002\001\001\000\004\012\014\001\001"
					+ "\000\002\001\001\000\002\001\001\000\004\006\015\001"
					+ "\001\000\004\013\021\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\010\003\022\004\004\007"
					+ "\005\001\001\000\004\014\023\001\001\000\004\011\025"
					+ "\001\001\000\014\003\011\004\004\007\005\010\026\011"
					+ "\027\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\010\003\031\004\004\007\005\001\001\000"
					+ "\002\001\001\000\002\001\001\000\004\007\034\001\001"
					+ "\000\002\001\001\000\010\003\040\004\004\007\005\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$CupParser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$CupParser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num, java_cup.runtime.lr_parser parser, java.util.Stack stack,
			int top) throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$CupParser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 0;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	/** User initialization code. */
	public void user_init() throws java.lang.Exception {
		System.out.println("   .........................   ");
		System.out.println(".:::::::::::::::::::::::::::::.");
		System.out.println("Cup parser has been initialized");

	}

	public void syntax_error(Symbol s) {
		System.out.println("syntax_error: " + (s.right + 1) + "|" + s.left + ":" + s.value);
	}

	public void unrecovered_syntax_error(Symbol s) {
		System.out.println("unrecovered_syntax_error: " + (s.right + 1) + "|" + s.left + ":" + s.value);
	}

	/** Cup generated class to encapsulate user supplied action code. */
	@SuppressWarnings({ "unused" })
	class CUP$CupParser$actions {

		private RuleModel rule;
		private GroupModel temporalGroup;
		private GroupModel actualGroup;
		private boolean negate = false;

		private void println(String str) {
			System.out.println(str);
		}

		/** Constructor */
		CUP$CupParser$actions(CupParser parser) {
			rule = new RuleModel();
			actualGroup = rule.getLeft();
			this.parser = parser;
		}

		private final CupParser parser;

		/**
		 * Method 0 with the actual generated action code for actions 0 to 300.
		 */
		public final java_cup.runtime.Symbol CUP$CupParser$do_action_part00000000(int CUP$CupParser$act_num,
				java_cup.runtime.lr_parser CUP$CupParser$parser, java.util.Stack CUP$CupParser$stack,
				int CUP$CupParser$top) throws java.lang.Exception {
			/* Symbol object for return from actions */
			java_cup.runtime.Symbol CUP$CupParser$result;

			/* select the action based on the action number */
			switch (CUP$CupParser$act_num) {
			/* . . . . . . . . . . . . . . . . . . . . */
			case 0: // $START ::= START EOF
			{
				Object RESULT = null;
				int start_valleft = ((java_cup.runtime.Symbol) CUP$CupParser$stack
						.elementAt(CUP$CupParser$top - 1)).left;
				int start_valright = ((java_cup.runtime.Symbol) CUP$CupParser$stack
						.elementAt(CUP$CupParser$top - 1)).right;
				Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$CupParser$stack
						.elementAt(CUP$CupParser$top - 1)).value;
				RESULT = start_val;
				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("$START", 0,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				/* ACCEPT */
				CUP$CupParser$parser.done_parsing();
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 1: // START ::= REGISTRY
			{
				Object RESULT = null;

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("START", 0,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 2: // NT$0 ::=
			{
				Object RESULT = null;

				// println("::LeftSide");

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("NT$0", 8,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 3: // NT$1 ::=
			{
				Object RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupParser$stack
						.elementAt(CUP$CupParser$top - 1)).value;

				// println("::Middle");
				actualGroup = rule.getRight();

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("NT$1", 9,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 4: // NT$2 ::=
			{
				Object RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupParser$stack
						.elementAt(CUP$CupParser$top - 1)).value;

				// println("::RightSide");
				ParserController.addRule(rule);
				println("::RuleAdded " + rule.toString());
				rule = new RuleModel();
				actualGroup = rule.getLeft();

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("NT$2", 10,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 5: // REGISTRY ::= SIDE NT$0 MIDDLE NT$1 SIDE NT$2 END
			{
				Object RESULT = null;
				// propagate RESULT from NT$2
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupParser$stack
						.elementAt(CUP$CupParser$top - 1)).value;

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("REGISTRY", 6,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top - 6)),
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 6: // SIDE ::= PROPOSITION OPERATOR SIDE
			{
				Object RESULT = null;

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("SIDE", 1,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 7: // SIDE ::= PROPOSITION
			{
				Object RESULT = null;

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("SIDE", 1,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 8: // NT$3 ::=
			{
				Object RESULT = null;

				negate = true;

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("NT$3", 11,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 9: // PROPOSITION ::= Not NT$3 CONTENT
			{
				Object RESULT = null;
				// propagate RESULT from NT$3
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupParser$stack
						.elementAt(CUP$CupParser$top - 1)).value;

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("PROPOSITION", 2,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 10: // PROPOSITION ::= CONTENT
			{
				Object RESULT = null;

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("PROPOSITION", 2,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 11: // NT$4 ::=
			{
				Object RESULT = null;

				temporalGroup = new GroupModel(actualGroup, negate);
				actualGroup.addElement(temporalGroup);
				negate = false;
				actualGroup = temporalGroup;

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("NT$4", 12,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 12: // CONTENT ::= Startparenthesis NT$4 SIDE Stopparenthesis
			{
				Object RESULT = null;
				// propagate RESULT from NT$4
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupParser$stack
						.elementAt(CUP$CupParser$top - 2)).value;

				actualGroup = actualGroup.getFather();

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("CONTENT", 5,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top - 3)),
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 13: // CONTENT ::= Code
			{
				Object RESULT = null;
				int cleft = ((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).left;
				int cright = ((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).right;
				Object c = (Object) ((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;

				actualGroup.addElement(new LiteralModel(negate, c.toString()));
				negate = false;

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("CONTENT", 5,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 14: // MIDDLE ::= Biconditional
			{
				Object RESULT = null;

				rule.setDirection(0);

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("MIDDLE", 4,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 15: // MIDDLE ::= Reverseconditional
			{
				Object RESULT = null;

				rule.setDirection(-1);

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("MIDDLE", 4,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 16: // MIDDLE ::= Conditional
			{
				Object RESULT = null;

				rule.setDirection(1);

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("MIDDLE", 4,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 17: // OPERATOR ::= And
			{
				Object RESULT = null;
				int operatorleft = ((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).left;
				int operatorright = ((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).right;
				Object operator = (Object) ((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;

				actualGroup.addElement(new OperatorModel(operator.toString()));

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("OPERATOR", 3,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 18: // OPERATOR ::= Or
			{
				Object RESULT = null;
				int operatorleft = ((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).left;
				int operatorright = ((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).right;
				Object operator = (Object) ((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;

				actualGroup.addElement(new OperatorModel(operator.toString()));

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("OPERATOR", 3,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 19: // END ::= Enter END
			{
				Object RESULT = null;

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("END", 7,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 20: // END ::= Enter REGISTRY
			{
				Object RESULT = null;

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("END", 7,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 21: // END ::=
			{
				Object RESULT = null;

				CUP$CupParser$result = parser.getSymbolFactory().newSymbol("END", 7,
						((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()), RESULT);
			}
				return CUP$CupParser$result;

			/* . . . . . . */
			default:
				throw new Exception("Invalid action number " + CUP$CupParser$act_num + "found in internal parse table");

			}
		} /* end of method */

		/** Method splitting the generated action code into several parts. */
		public final java_cup.runtime.Symbol CUP$CupParser$do_action(int CUP$CupParser$act_num,
				java_cup.runtime.lr_parser CUP$CupParser$parser, java.util.Stack CUP$CupParser$stack,
				int CUP$CupParser$top) throws java.lang.Exception {
			return CUP$CupParser$do_action_part00000000(CUP$CupParser$act_num, CUP$CupParser$parser,
					CUP$CupParser$stack, CUP$CupParser$top);
		}
	}

}
